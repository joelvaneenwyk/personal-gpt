[project]
name = "personal-gpt"
version = "0.2.0"
description = "Private GPT"
authors = [
    { name = "Zylon", email = "hi@zylon.ai" },
    { name = "Joel Van Eenwyk", email = "joel.vaneenwyk@gmail.com" },
]
dependencies = [
    "fastapi[all]>=0.111.0",
    "boto3>=1.34.114",
    "injector>=0.21.0",
    "pyyaml>=6.0.1",
    "python-multipart>=0.0.9",
    "pypdf>=4.2.0",
    "llama-index>=0.10.39",
    "watchdog>=4.0.1",
    "qdrant-client>=1.9.1",
    "chromadb>=0.5.0",
    "asyncpg>=0.29.0",
    "pgvector>=0.2.5",
    "psycopg2-binary>=2.9.9",
    "sqlalchemy>=2.0.30",
    "huggingface-hub>=0.23.2",
    "pydantic>=2.7.2",
    "transformers>=4.41.1",
    "llama-index-llms-openai>=0.1.21",
    "llama-index-embeddings-huggingface>=0.2.0",
    "llama-index-embeddings-openai>=0.1.10",
    "llama-index-embeddings-instructor>=0.1.3",
    "llama-index-llms-llama-cpp>=0.1.3",
    "llama-index-llms-openai-like>=0.1.3",
    "llama-index-llms-replicate>=0.1.3",
    "llama-index-core>=0.10.40",
    "llama-index-experimental>=0.1.3",
    "llama-index-bundle>=0.0.1",
    "llama-index-legacy>=0.9.48",
    "gradio>=4.31.5",
]
readme = "README.md"
requires-python = ">=3.11,<3.12"

[project.scripts]
pgpt = "personal_gpt:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["src/personal_gpt"]

[tool.rye]
managed = true
dev-dependencies = [
    "black>=24.4.2",
    "mypy>=1.10.0",
    "pre-commit>=3.7.1",
    "pytest>=8.2.1",
    "pytest-cov>=5.0.0",
    "ruff>=0.4.6",
    "pytest-asyncio>=0.23.7",
    "types-pyyaml>=6.0.12.20240311",
    "pylint>=3.2.2",
]
# Packages configs

## coverage

[tool.coverage.run]
branch = true

[tool.coverage.report]
skip_empty = true
precision = 2

## black

[tool.black]
target-version = ['py311']

## ruff
# Recommended ruff config for now, to be updated as we go along.
[tool.ruff]
target-version = 'py311'

[tool.ruff.lint]
# See all rules at https://beta.ruff.rs/docs/rules/
select = [
    "E",   # pycodestyle
    "W",   # pycodestyle
    "F",   # Pyflakes
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "D",   # pydocstyle
    "I",   # isort
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q",   # flake8-quotes
    "UP",  # pyupgrade
    "PT",  # flake8-pytest-style
    "RUF", # Ruff-specific rules
]

ignore = [
    "E501", # "Line too long"
    # -> line length already regulated by black
    "PT011", # "pytest.raises() should specify expected exception"
    # -> would imply to update tests every time you update exception message
    "SIM102", # "Use a single `if` statement instead of nested `if` statements"
    # -> too restrictive,
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    # -> "Missing docstring in public function too restrictive"
]

[tool.ruff.lint.pydocstyle]
# Automatically disable rules that are incompatible with Google docstring convention
convention = "google"

[tool.ruff.lint.pycodestyle]
max-doc-length = 88

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-type-checking]
strict = true
runtime-evaluated-base-classes = ["pydantic.BaseModel"]
# Pydantic needs to be able to evaluate types at runtime
# see https://pypi.org/project/flake8-type-checking/ for flake8-type-checking documentation
# see https://beta.ruff.rs/docs/settings/#flake8-type-checking-runtime-evaluated-base-classes for ruff documentation

[tool.ruff.lint.per-file-ignores]
# Allow missing docstrings for tests
"tests/**/*.py" = ["D1"]

## mypy

[tool.mypy]
python_version = "3.11"
strict = true
check_untyped_defs = false
explicit_package_bases = true
warn_unused_ignores = false
exclude = ["tests"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
addopts = ["--import-mode=importlib"]
